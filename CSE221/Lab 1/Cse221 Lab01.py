{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"13dwcaQdXMWln0fI8vr00uNTvgr9ZzqGN","authorship_tag":"ABX9TyNSlqE3o8P8sbzmwmHZYCoQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"buy0dUN_1p6a"},"outputs":[],"source":["# task 1 (a)\n","\n","input_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/input1a.txt\", mode = 'r')\n","output_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/output1a.txt\", mode = 'w')\n","\n","t = int(input_file.readline())\n","\n","for i in range(t):\n","  n = int(input_file.readline())\n","  if n % 2 == 0:\n","    print(f\"{n} is an Even number.\", file = output_file)\n","  else:\n","    print(f\"{n} is an Odd number.\", file = output_file)\n","\n","input_file.close()\n","output_file.close()"]},{"cell_type":"code","source":["# task 1 (b)\n","\n","input_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/input1b.txt\", mode = 'r')\n","output_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/output1b.txt\", mode = 'w')\n","\n","t = int(input_file.readline())\n","\n","for i in range(t):\n","  arr = input_file.readline().split()\n","  oprnd1 = int(arr[1])\n","  operator = arr[2]\n","  oprnd2 = int(arr[3])\n","\n","  if operator == '+':\n","    print(f\"The result of {oprnd1} {operator} {oprnd2} is {oprnd1 + oprnd2}\", file = output_file)\n","  elif operator == '-':\n","    print(f\"The result of {oprnd1} {operator} {oprnd2} is {oprnd1 - oprnd2}\", file = output_file)\n","  elif operator == '*':\n","    print(f\"The result of {oprnd1} {operator} {oprnd2} is {oprnd1 * oprnd2}\", file = output_file)\n","  elif operator == '/':\n","    print(f\"The result of {oprnd1} {operator} {oprnd2} is {oprnd1 / oprnd2}\", file = output_file)\n","\n","input_file.close()\n","output_file.close()"],"metadata":{"id":"zfYe8ski9DZ6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# task 2 (a) implementation 1\n","\n","def fibonacci_1(n):\n","  '''\n","  Time complexity : O(2^n)\n","  Space complexity : O(1)\n","  '''\n","  if n < 0:\n","    print(\"Invalid input!\")\n","  elif n <= 1:\n","    return n\n","  else:\n","    return fibonacci_1(n-1)+fibonacci_1(n-2)\n","\n","n = int(input(\"Enter a number: \"))\n","nth_fib = fibonacci_1(n)\n","print(\"The {} th fibonacci number is {}.\".format(n, nth_fib))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P2v10qvLBenI","executionInfo":{"status":"ok","timestamp":1675558464158,"user_tz":-360,"elapsed":7184,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"115a66b1-5b45-4210-dd76-f66e1dc6f83e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 5\n","The 5 th fibonacci number is 5.\n"]}]},{"cell_type":"code","source":["# task 2 (a) implementation 2\n","\n","def fibonacci_2(n):\n","  '''\n","  Time complexity : O(n)\n","  Space complexity : O(n)\n","  '''\n","  if n<0:\n","    return \"Invalid Input\"\n","  if n<=1:\n","    return n\n","  fib = [0] * (n+1)\n","  fib[0] = 0\n","  fib[1] = 1\n","  for i in range(2,n+1):\n","    fib[i] = fib[i-1] + fib[i-2]\n","  return fib[n]\n","  \n","n = int(input(\"Enter a number: \"))\n","nth_fib = fibonacci_2(n)\n","print(\"The {} th fibonacci number is {}.\".format(n, nth_fib))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HlyhEqCXBetV","executionInfo":{"status":"ok","timestamp":1675558468596,"user_tz":-360,"elapsed":2844,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"17c8632d-4ff3-44ee-dad7-e844bc6b588b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 2\n","The 2 th fibonacci number is 1.\n"]}]},{"cell_type":"code","source":["# task 2 (b)\n","\n","import time\n","import math\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","#change the value of n for your own experimentation\n","n = 10\n","\n","x = [i for i in range(n)]\n","y = [0 for i in range(n)]\n","z = [0 for i in range(n)]\n","\n","for i in range(n-1):\n","  start = time.time()\n","  fibonacci_1(x[i+1])\n","  y[i+1]= time.time()-start\n","  start = time.time()\n","  fibonacci_2(x[i+1])\n","  z[i+1]= time.time()-start\n","\n","x_interval = math.ceil(n/10)\n","plt.plot(x, y, 'r')\n","plt.plot(x, z, 'b')\n","plt.xticks(np.arange(min(x), max(x)+1, x_interval))\n","plt.xlabel('n-th position')\n","plt.ylabel('time')\n","plt.title('Comparing Time Complexity!')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"QmtHxNHZBeze","executionInfo":{"status":"ok","timestamp":1675558541870,"user_tz":-360,"elapsed":707,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"a72da2fa-8b97-4f0b-fa95-e8f0b4e15fcf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# task 3\n","\n","def bubbleSort(arr):\n","  for i in range(len(arr)-1):\n","    change = 0  # keeping track of any swapping operation occured in an iteration from the beginning\n","\n","    for j in range(len(arr)-i-1):\n","      if arr[j] > arr[j+1]:\n","        change = 1\n","        arr[j], arr[j+1] = arr[j+1], arr[j]\n","    \n","    if change == 0:  # breaking the loop if no changes occurred\n","      break\n","  \n","\n","input_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/input3.txt\", mode = 'r')\n","output_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/output3.txt\", mode = 'w')\n","\n","t = int(input_file.readline())\n","array = list(map(int, input_file.readline().split()))\n","\n","bubbleSort(array)\n","\n","print(\" \".join(map(str, array)), file = output_file)\n","\n","input_file.close()\n","output_file.close()"],"metadata":{"id":"JwcT3YIhBf4m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# task 4\n","\n","def sel_sort(n, s_id, marks):\n","  for i in range(n-1):\n","    max_index = i\n","\n","    for j in range(i+1, n):\n","      if marks[max_index] == marks[j]:\n","        if s_id[i] > s_id[j]:\n","          max_index = j\n","      elif marks[max_index] < marks[j]:\n","        max_index = j\n","    \n","    if max_index != i:\n","      s_id[i], s_id[max_index] = s_id[max_index], s_id[i]\n","      marks[i], marks[max_index] = marks[max_index], marks[i]\n","\n","\n","input_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/input4.txt\", mode = 'r')\n","output_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/output4.txt\", mode = 'w')\n","\n","n = int(input_file.readline())\n","s_id = list(map(int, input_file.readline().split()))\n","marks = list(map(int, input_file.readline().split()))\n","\n","sel_sort(n, s_id, marks)\n","\n","for i in range(n):\n","  print(f\"ID: {s_id[i]} Mark: {marks[i]}\", file = output_file)\n","  \n","input_file.close()\n","output_file.close()"],"metadata":{"id":"ZJHTlNRRIvc4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# task 5\n","\n","input_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/input5.txt\", mode = 'r')\n","output_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 1/output5.txt\", mode = 'w')\n","\n","n = int(input_file.readline())\n","array = []\n","for line in input_file.readlines():\n","  line = line.split()\n","  array.append((line[0], line[4], line[6]))\n","\n","print(array)\n","# selection_sort(n, s_id, marks)\n","\n","  \n","input_file.close()\n","output_file.close()"],"metadata":{"id":"qlY-GvJhD3Z9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675566688358,"user_tz":-360,"elapsed":1241,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"beeb96f5-53b2-4213-c7c4-df3a914ae9f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[('ABCD', 'Mymensingh', '00:30'), ('DhumketuExpress', 'Chittagong', '02:30'), ('SubornoExpress', 'Chittagong', '14:30'), ('ABC', 'Dhaka', '17:30'), ('ShonarBangla', 'Dhaka', '12:30'), ('SubornoExpress', 'Rajshahi', '14:30'), ('ABCD', 'Chittagong', '01:00'), ('SubornoExpress', 'Dhaka', '11:30'), ('ABC', 'Barisal', '03:00'), ('PadmaExpress', 'Chittagong', '20:30'), ('ABC', 'Khulna', '03:00'), ('ABCE', 'Sylhet', '23:05'), ('PadmaExpress', 'Dhaka', '19:30')]\n"]}]},{"cell_type":"code","source":["import time\n","import math\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","class HospitalBubble:\n","    def __init__(self):\n","        self.queue = []\n","\n","    def enque(self, name, seriousness):\n","        self.queue += [(seriousness, name)]\n","        self.sort()\n","        self.printQueue()\n","\n","    def seeDoctor(self):\n","        if len(self.queue) > 0:\n","            patient = self.queue[0][1]\n","            self.queue = self.queue[1: ]\n","            self.printQueue()\n","            return patient\n","\n","    def printQueue(self):\n","        print(self.queue)\n","\n","    def sort(self):  # bubble sort\n","        for turn in range(len(self.queue)-1):\n","            flag = False\n","\n","            for index in range(len(self.queue)-1):\n","                if self.queue[index][0] > self.queue[index + 1][0]:\n","                    self.queue[index], self.queue[index + 1] = self.queue[index + 1], self.queue[index]\n","                    flag = True\n","\n","            if flag == False:\n","                break\n","\n","\n","\n","class Min_Heap:\n","    def __init__(self, length):\n","        self.heap_arr = [None] * length\n","        self.index = 1  # index to add new value\n","\n","\n","    def add(self, val):\n","        if len(self.heap_arr) >= 2 and self.heap_arr[1] == None:\n","            self.heap_arr[1] = val\n","            self.index = 2\n","        else:\n","            if self.index >= len(self.heap_arr):\n","                height = int(math.ceil(math.log(len(self.heap_arr), 2)))\n","                self.heap_arr += [None] * (2 ** height)\n","                self.heap_arr[self.index] = val\n","                self.index += 1\n","            else:\n","                self.heap_arr[self.index] = val\n","                self.index += 1\n","\n","        self.heapify(self.index - 1)\n","\n","\n","    def delete(self):\n","        val = None\n","\n","        if self.index == 2:\n","            val = self.heap_arr[1]\n","            self.index -= 1\n","            self.heap_arr[self.index] = None\n","        elif self.index > 2:\n","            self.heap_arr[1], self.heap_arr[self.index - 1] = self.heap_arr[self.index - 1], self.heap_arr[1]  # swap with root\n","            self.index -= 1\n","            val = self.heap_arr[self.index]\n","            self.heap_arr[self.index] = None\n","\n","        self.sink(1)\n","        return val\n","\n","\n","    def heapify(self, index):  # swim up\n","        while index > 1:\n","            if self.heap_arr[index // 2][0] > self.heap_arr[index][0]:\n","                self.heap_arr[index // 2], self.heap_arr[index] = self.heap_arr[index], self.heap_arr[index // 2]\n","                index //= 2\n","            else:\n","                break\n","\n","\n","    def sink(self, index):\n","        if (index * 2) + 1 < len(self.heap_arr):  # if nodes are present\n","            if self.heap_arr[index * 2] == None and self.heap_arr[(index * 2) + 1] == None:  # no child\n","                return\n","            elif self.heap_arr[index * 2] != None and self.heap_arr[(index * 2) + 1] != None:  # both child\n","                if self.heap_arr[index][0] > self.heap_arr[index * 2][0] and self.heap_arr[index][0] > self.heap_arr[(index * 2) + 1][0]:  # current root is largest\n","                    if self.heap_arr[index * 2][0] < self.heap_arr[(index * 2) + 1][0]:  # left child is smallest\n","                        self.heap_arr[index], self.heap_arr[index * 2] = self.heap_arr[index * 2], self.heap_arr[index]\n","                        self.sink(index * 2)\n","                    else:  # right child is smallest\n","                        self.heap_arr[index], self.heap_arr[(index * 2) + 1] = self.heap_arr[(index * 2) + 1], self.heap_arr[index]\n","                        self.sink((index * 2) + 1)\n","                elif self.heap_arr[index][0] > self.heap_arr[index * 2][0]:\n","                    self.heap_arr[index], self.heap_arr[index * 2] = self.heap_arr[index * 2], self.heap_arr[index]\n","                    self.sink(index * 2)\n","                elif self.heap_arr[index][0] > self.heap_arr[(index * 2) + 1][0]:\n","                    self.heap_arr[index], self.heap_arr[(index * 2) + 1] = self.heap_arr[(index * 2) + 1], self.heap_arr[index]\n","                    self.sink((index * 2) + 1)\n","            elif self.heap_arr[index * 2] != None:  # left child\n","                if self.heap_arr[index][0] > self.heap_arr[index * 2][0]:\n","                    self.heap_arr[index], self.heap_arr[index * 2] = self.heap_arr[index * 2], self.heap_arr[index]\n","                    self.sink(index * 2)\n","\n","\n","    def __str__(self):\n","        return str(self.heap_arr)\n","\n","\n","\n","class HospitalHeap:\n","    def __init__(self):\n","        self.queue = Min_Heap(1)\n","\n","    def enque(self, name, seriousness):\n","        self.queue.add((seriousness, name))\n","        self.printQueue()\n","\n","    def seeDoctor(self):\n","        patient = self.queue.delete()\n","        self.printQueue()\n","        return patient[1]\n","\n","    def printQueue(self):\n","        print(self.queue)\n","\n","\n","if __name__ == \"__main__\":\n","    offset = time.time()\n","    data = ['ABC 3\\n', 'EWQ 3\\n', 'SDF 2\\n', 'KLM 1\\n', 'see doctor\\n', 'see doctor\\n', 'FDS 1\\n', 'OPN 3\\n', 'TYU 3\\n', 'see doctor\\n', 'XCV 2\\n', 'see doctor\\n', 'see doctor']\n","    offset = time.time() - offset\n","\n","    n = len(data)\n","\n","    x = [i for i in range(n)]\n","    y = [0 for i in range(n)]\n","    z = [0 for i in range(n)]\n","\n","    i = 0\n","    start = time.time()\n","    hospital = HospitalBubble()\n","    for line in data:\n","        if line[-1] == '\\n':\n","            line = line[: -1]\n","\n","        if line.lower() == \"see doctor\":\n","            patient = hospital.seeDoctor()\n","        else:\n","            hospital.enque(line[: -2], int(line[-1]))\n","\n","        y[i] = time.time() - start + offset\n","        i += 1\n","\n","    i = 0\n","    start = time.time()\n","    hospital = HospitalHeap()\n","    for line in data:\n","        if line[-1] == '\\n':\n","            line = line[: -1]\n","\n","        if line.lower() == \"see doctor\":\n","            patient = hospital.seeDoctor()\n","        else:\n","            hospital.enque(line[: -2], int(line[-1]))\n","\n","        z[i] = time.time() - start + offset\n","        i += 1\n","\n","    x_interval = math.ceil(n / 10)\n","    plt.plot(x, y, 'r')  # bubble\n","    plt.plot(x, z, 'b')  # heap\n","    # plt.xticks(np.arange(min(x), max(x) + 1, x_interval))\n","    plt.xlabel('n-th data')\n","    plt.ylabel('time')\n","    plt.title('Comparing Time Complexity!')\n","    plt.legend(['Bubble Sort', 'Heap Sort'], loc = 'lower middle')\n","    plt.show()\n","\n","    print(x, \"\\n\", y, \"\\n\", z)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"80SqEE2sZk-M","executionInfo":{"status":"ok","timestamp":1676823797106,"user_tz":-360,"elapsed":1008,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"20c9bc21-4b55-4160-8587-d67f359f30d0"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[(3, 'ABC')]\n","[(3, 'ABC'), (3, 'EWQ')]\n","[(2, 'SDF'), (3, 'ABC'), (3, 'EWQ')]\n","[(1, 'KLM'), (2, 'SDF'), (3, 'ABC'), (3, 'EWQ')]\n","[(2, 'SDF'), (3, 'ABC'), (3, 'EWQ')]\n","[(3, 'ABC'), (3, 'EWQ')]\n","[(1, 'FDS'), (3, 'ABC'), (3, 'EWQ')]\n","[(1, 'FDS'), (3, 'ABC'), (3, 'EWQ'), (3, 'OPN')]\n","[(1, 'FDS'), (3, 'ABC'), (3, 'EWQ'), (3, 'OPN'), (3, 'TYU')]\n","[(3, 'ABC'), (3, 'EWQ'), (3, 'OPN'), (3, 'TYU')]\n","[(2, 'XCV'), (3, 'ABC'), (3, 'EWQ'), (3, 'OPN'), (3, 'TYU')]\n","[(3, 'ABC'), (3, 'EWQ'), (3, 'OPN'), (3, 'TYU')]\n","[(3, 'EWQ'), (3, 'OPN'), (3, 'TYU')]\n","[None, (3, 'ABC')]\n","[None, (3, 'ABC'), (3, 'EWQ'), None]\n","[None, (2, 'SDF'), (3, 'EWQ'), (3, 'ABC')]\n","[None, (1, 'KLM'), (2, 'SDF'), (3, 'ABC'), (3, 'EWQ'), None, None, None]\n","[None, (2, 'SDF'), (3, 'EWQ'), (3, 'ABC'), None, None, None, None]\n","[None, (3, 'ABC'), (3, 'EWQ'), None, None, None, None, None]\n","[None, (1, 'FDS'), (3, 'EWQ'), (3, 'ABC'), None, None, None, None]\n","[None, (1, 'FDS'), (3, 'EWQ'), (3, 'ABC'), (3, 'OPN'), None, None, None]\n","[None, (1, 'FDS'), (3, 'EWQ'), (3, 'ABC'), (3, 'OPN'), (3, 'TYU'), None, None]\n","[None, (3, 'TYU'), (3, 'EWQ'), (3, 'ABC'), (3, 'OPN'), None, None, None]\n","[None, (2, 'XCV'), (3, 'TYU'), (3, 'ABC'), (3, 'OPN'), (3, 'EWQ'), None, None]\n","[None, (3, 'EWQ'), (3, 'TYU'), (3, 'ABC'), (3, 'OPN'), None, None, None]\n","[None, (3, 'OPN'), (3, 'TYU'), (3, 'ABC'), None, None, None, None]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-9-5b2847eff844>:182: MatplotlibDeprecationWarning: Unrecognized location 'lower middle'. Falling back on 'best'; valid locations are\n","\tbest\n","\tupper right\n","\tupper left\n","\tlower left\n","\tlower right\n","\tright\n","\tcenter left\n","\tcenter right\n","\tlower center\n","\tupper center\n","\tcenter\n","This will raise an exception in 3.3.\n","  plt.legend(['Bubble Sort', 'Heap Sort'], loc = 'lower middle')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \n"," [0.0012040138244628906, 0.0016331672668457031, 0.002092123031616211, 0.0024526119232177734, 0.0027837753295898438, 0.0031163692474365234, 0.003435850143432617, 0.0037364959716796875, 0.004024028778076172, 0.0043299198150634766, 0.004645824432373047, 0.004931926727294922, 0.005290508270263672] \n"," [0.0003502368927001953, 0.0005178451538085938, 0.0005393028259277344, 0.000560760498046875, 0.0005834102630615234, 0.0005993843078613281, 0.0006151199340820312, 0.0006380081176757812, 0.0006535053253173828, 0.0006709098815917969, 0.0006866455078125, 0.0007021427154541016, 0.0007181167602539062]\n"]}]}]}