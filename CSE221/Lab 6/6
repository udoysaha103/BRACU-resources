{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1g3hxnWTnXY8ldRSU533kzNe-D2azAA2d","authorship_tag":"ABX9TyN5ewMPZL3pWnUMYoP4e4KC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"17neah559-SP","executionInfo":{"status":"ok","timestamp":1679906374817,"user_tz":-360,"elapsed":384,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"cd92a11c-8f7f-4793-b013-0289e27d0776"},"outputs":[{"output_type":"stream","name":"stdout","text":["5 8 0 2 4 -1\n"]}],"source":["# task 1\n","\n","from queue import Queue\n","\n","def Dijkstra(adj_lst, start):\n","  visited_arr = [-1] * (len(adj_lst))\n","  length_arr = [-1] * (len(adj_lst))\n","  # -1 = Unvisited\n","  # 0 = Visited but Not Explored\n","  # 1 = Visited and Explored\n","  que = Queue()\n","  que.put(start)\n","  visited_arr[start] = 0\n","  length_arr[start] = 0\n","\n","  while not que.empty():\n","    u = que.get()\n","    visited_arr[u] = 1  # visited\n","\n","    for distance in sorted(list(adj_lst[u].keys())):\n","      adjacents = adj_lst[u][distance]\n","\n","      for node in adjacents:\n","        if visited_arr[node] == -1:  # unvisited\n","          que.put(node)\n","          visited_arr[node] = 0\n","          length_arr[node] = length_arr[u] + distance\n","        elif visited_arr[node] == 0:  # visited but not explored\n","          if (length_arr[u] + distance) < length_arr[node]:\n","            length_arr[node] = length_arr[u] + distance\n","        else:\n","          continue\n","  \n","  return length_arr\n","\n","\n","\n","input_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 6/input.txt\", \"r\")\n","output_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 6/output.txt\", 'w')\n","\n","n, m = list(map(int, input_file.readline().split()))\n","adj_lst = {}\n","for i in range(n + 1):\n","    adj_lst[i] = dict()\n","\n","for edge_no in range(m):\n","    u, v, w = list(map(int, input_file.readline().split()))\n","\n","    if w not in adj_lst[u]:\n","      adj_lst[u][w] = [v]\n","    else:\n","      adj_lst[u][w].append(v)\n","\n","start = int(input_file.readline())\n","\n","# print(adj_lst)\n","# print(Dijkstra(adj_lst, start))\n","\n","length_arr = Dijkstra(adj_lst, start)\n","print(\" \".join(map(str, length_arr[1: ])))"]},{"cell_type":"code","source":["# task 2\n","\n","input_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 6/input.txt\", \"r\")\n","output_file = open(\"/content/drive/MyDrive/Colab Notebooks/CSE221/Lab 6/output.txt\", 'w')\n","\n","n, m = list(map(int, input_file.readline().split()))\n","adj_lst = {}\n","for i in range(n + 1):\n","    adj_lst[i] = dict()\n","\n","for edge_no in range(m):\n","    u, v, w = list(map(int, input_file.readline().split()))\n","\n","    if w not in adj_lst[u]:\n","      adj_lst[u][w] = [v]\n","    else:\n","      adj_lst[u][w].append(v)\n","\n","start1, start2 = list(map(int, input_file.readline().split()))\n","\n","length_arr_1 = Dijkstra(adj_lst, start1)\n","length_arr_2 = Dijkstra(adj_lst, start2)\n","\n","maximum_time = -1\n","node = -1\n","\n","for i in range(1, n+1):\n","  if length_arr_1[i] >= 0 and length_arr_2[i] >= 0:\n","    if maximum_time == -1:\n","      maximum_time = max(length_arr_1[i], length_arr_2[i])\n","      node = i\n","    else:\n","      m = max(length_arr_1[i], length_arr_2[i])\n","\n","      if m < maximum_time:\n","        maximum_time = m\n","        node = i\n","  \n","if node == -1:\n","  print(\"Impossible\")\n","else:\n","  print(\"Time\", maximum_time)\n","  print(\"Node\", node)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7gGPhSdZO-MI","executionInfo":{"status":"ok","timestamp":1679907849215,"user_tz":-360,"elapsed":448,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"ad3e1938-d30b-40d4-94d9-f1f1822a3765"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Time 8\n","Node 2\n"]}]},{"cell_type":"code","source":["# task 3\n","\n","import heapq\n","\n","def prim(adj_lst, start):\n","    visited_arr = [-1] * (len(adj_lst))\n","    weight_arr = [-1] * (len(adj_lst))\n","    # -1 = Unvisited\n","    # 0 = Visited but Not Explored\n","    # 1 = Visited and Explored\n","    weight_arr[start] = [0, start, -1]  # items are in the format (cost, self, parent)\n","    visited_arr[start] = 0\n","    heap = []\n","    heapq.heappush(heap, weight_arr[start])\n","\n","    while len(heap) > 0:\n","        u = heapq.heappop(heap)[1]\n","        visited_arr[u] = 1\n","\n","        for v, w in adj_lst[u]:\n","            if visited_arr[v] == -1:  # unvisited\n","                visited_arr[v] = 0\n","                weight_arr[v] = [w, v, u]\n","\n","                heapq.heappush(heap, weight_arr[v])\n","            elif visited_arr[v] == 0:  # in queue\n","                if w < weight_arr[v][0]:\n","                    weight_arr[v][0] = w\n","                    weight_arr[v][2] = u\n","\n","                    heapq.heapify(heap)\n","\n","    return weight_arr\n","\n","\n","input_file = open(\"C:\\\\Users\\\\udoys\\\\OneDrive\\\\Desktop\\\\New Text Document.txt\", \"r\")\n","\n","n, m = list(map(int, input_file.readline().split()))\n","adj_lst = {}\n","for i in range(n + 1):\n","    adj_lst[i] = []\n","\n","for edge_no in range(m):\n","    u, v, w = list(map(int, input_file.readline().split()))\n","\n","    if u == v:  # removing self loops\n","        continue\n","\n","    edge = [v, w]\n","\n","    flag = False\n","    for i in adj_lst[u]:  # removing parallel edges\n","        if i[0] == v:\n","            Flag = True\n","\n","            if w < i[1]:\n","                i[1] = w\n","\n","            break\n","\n","    if flag == False:\n","        adj_lst[u].append(edge)\n","\n","mst_edges = prim(adj_lst, 1)\n","\n","maximum_edge_weight = 0\n","for w, v, u in mst_edges[1: ]:\n","    if w > maximum_edge_weight:\n","        maximum_edge_weight = w\n","\n","print(maximum_edge_weight)"],"metadata":{"id":"3gIkbHLrVtoI"},"execution_count":null,"outputs":[]}]}