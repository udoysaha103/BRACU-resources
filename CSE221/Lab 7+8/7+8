{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOmwXas3aG+8dAKTxgRrR5A"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"ey6nnxU7CEhe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681107580154,"user_tz":-360,"elapsed":18607,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"7c421049-fa6b-4e6c-ed19-2b70014482af"},"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","3 7\n","2 5\n","1 3\n","[(3, 1), (5, 2), (7, 3)]\n"]}],"source":["# task 1\n","\n","input_file = open(\"C:\\\\Users\\\\udoys\\\\OneDrive\\\\Desktop\\\\New Text Document.txt\", 'r')\n","output_file = open(\"C:\\\\Users\\\\udoys\\\\OneDrive\\\\Desktop\\\\output.txt\", 'w')\n","\n","arr = []\n","n = int(input_file.readline())\n","for i in range(n):\n","    start, end = list(map(int, input_file.readline().split()))\n","    arr.append((end, start))\n","\n","arr.sort()\n","current_time = 0\n","\n","i = 0\n","while i < len(arr):\n","    if arr[i][1] >= current_time:\n","        current_time = arr[i][0]\n","        i += 1\n","    else:\n","        arr.pop(i)\n","\n","print(len(arr), file = output_file)\n","for end, start in arr:\n","    print(start, end, file = output_file)"]},{"cell_type":"code","source":["# task 2\n","\n","def dfs(adj_lst, node, visit_arr):\n","    visited_arr[node] = 0  # visited\n","    count = 1\n","\n","    for adj in adj_lst[node]:\n","        if visit_arr[adj] == -1:  # visit only when unvisited\n","            count += dfs(adj_lst, adj, visit_arr)\n","\n","    visited_arr[node] = 1  # explored\n","    return count\n","\n","\n","input_file = open(\"input2b.txt\", \"r\")\n","output_file = open(\"output2b.txt\", 'w')\n","\n","n, k = list(map(int, input_file.readline().split()))\n","\n","adj_lst = {}\n","for i in range(n):\n","    adj_lst[i] = []\n","\n","for edge_no in range(k):\n","    visited_arr = [-1] * n\n","    # -1 = unvisited node\n","    # 0 = visited but not explored\n","    # 1 = visited and explored\n","\n","    u, v = list(map(int, input_file.readline().split()))\n","\n","    adj_lst[u].append(v)\n","    adj_lst[v].append(u)\n","\n","    joined = dfs(adj_lst, u, visited_arr)\n","    print(joined, file = output_file)\n","\n","input_file.close()\n","output_file.close()"],"metadata":{"id":"k4Q9blGQ2jYa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# task 3\n","\n","import heapq\n","\n","def prim(adj_lst, start):\n","    visited_arr = [-1] * (len(adj_lst))\n","    weight_arr = [-1] * (len(adj_lst))\n","    # -1 = Unvisited\n","    # 0 = Visited but Not Explored\n","    # 1 = Visited and Explored\n","    weight_arr[start] = [0, start, -1]  # items are in the format (cost, self, parent)\n","    visited_arr[start] = 0\n","    heap = []\n","    heapq.heappush(heap, weight_arr[start])\n","\n","    while len(heap) > 0:\n","        u = heapq.heappop(heap)[1]\n","        visited_arr[u] = 1\n","\n","        for v, w in adj_lst[u]:\n","            if visited_arr[v] == -1:  # unvisited\n","                visited_arr[v] = 0\n","                weight_arr[v] = [w, v, u]\n","\n","                heapq.heappush(heap, weight_arr[v])\n","            elif visited_arr[v] == 0:  # in queue\n","                if w < weight_arr[v][0]:\n","                    weight_arr[v][0] = w\n","                    weight_arr[v][2] = u\n","\n","                    heapq.heapify(heap)\n","\n","    return weight_arr\n","\n","\n","input_file = open(\"input3a.txt\", \"r\")\n","output_file = open(\"output3a.txt\", 'w')\n","\n","n, m = list(map(int, input_file.readline().split()))\n","\n","adj_lst = {}\n","for i in range(n + 1):\n","    adj_lst[i] = []\n","\n","for edge_no in range(m):\n","    u, v, w = list(map(int, input_file.readline().split()))\n","\n","    if u == v:  # removing self loops\n","        continue\n","\n","    edge = [v, w]\n","\n","    flag = False\n","    for i in adj_lst[u]:  # removing parallel edges\n","        if i[0] == v:\n","            Flag = True\n","\n","            if w < i[1]:\n","                i[1] = w\n","\n","                for j in adj_lst[v]:\n","                    if j[0] == u:\n","                        j[1] = w\n","\n","            break\n","\n","    if flag == False:\n","        adj_lst[u].append(edge)\n","        adj_lst[v].append([u, w])\n","\n","mst_edges = prim(adj_lst, 1)\n","\n","mst_cost = 0\n","for w, v, u in mst_edges[1: ]:\n","    mst_cost += w\n","\n","print(mst_cost, file = output_file)\n","\n","input_file.close()\n","output_file.close()"],"metadata":{"id":"UgmDulqBDpTN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# task 4\n","\n","input_file = open(\"input4d.txt\", \"r\")\n","output_file = open(\"output4d.txt\", 'w')\n","\n","n = int(input_file.readline())\n","\n","if n < 3:\n","    print(n, file = output_file)\n","else:\n","    i = 0\n","    j = 1\n","\n","    for k in range(n):\n","        i, j = j, i+j\n","\n","    print(j, file = output_file)\n","\n","input_file.close()\n","output_file.close()"],"metadata":{"id":"nv60Io6uSVZh"},"execution_count":null,"outputs":[]}]}