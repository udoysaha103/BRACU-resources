{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM4Hhtua3KznDNfk8/VNxUr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eUQaw43RTl_H","executionInfo":{"status":"ok","timestamp":1669047054317,"user_tz":-360,"elapsed":473,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"526169e9-946d-4f16-ebf8-f69bf0929e6a"},"outputs":[{"output_type":"stream","name":"stdout","text":["3 <=> 1 <=> 2 <=> 3\n"]}],"source":["class Node:\n","  def __init__(self, data, prev, next):\n","    self.data = data\n","    self.prev = prev\n","    self.next = next\n","\n","\n","class LinkedList:  # doubly circular\n","  def __init__(self, a):\n","    self.head = None\n","    self.size = 0\n","\n","    if isinstance(a, list):\n","      current_node = None\n","\n","      for index in range(len(a)):\n","        new_node = Node(a[index], None, None)\n","\n","        if self.head == None:\n","          self.head = new_node\n","          self.head.next = self.head\n","          self.head.prev = self.head\n","          current_node = new_node\n","        else:\n","          current_node.next = new_node\n","          new_node.next = self.head\n","\n","          self.head.prev = new_node\n","          new_node.prev = current_node\n","\n","          current_node = new_node\n","    else:\n","      self.head = a\n","    \n","    self.size = self.list_size()\n","  \n","  def list_size(self):\n","    size = 0\n","    current_node = None\n","\n","    if self.head != None:\n","      size += 1\n","      current_node = self.head.next\n","    \n","    while current_node != self.head:\n","      size += 1\n","      current_node = current_node.next\n","    \n","    self.size = size\n","    return size\n","  \n","  def printList(self, new_head = None):\n","    if (new_head == False) or (self.head == None):\n","      print(\"This list is empty.\")\n","    else:\n","      if new_head == None:\n","        new_head = self.head\n","      \n","      print(new_head.data, end = \"\")\n","\n","      current_node = new_head.next\n","\n","      while current_node != new_head:\n","        print(f\" <=> {current_node.data}\", end = \"\")\n","\n","        if current_node.data == new_head.data:\n","          break\n","        else:\n","          current_node = current_node.next\n","      \n","      print()\n","  \n","  def palindromeSeparator(self):\n","    size = self.list_size()\n","\n","    palindrome_heads = [None] * size\n","    palindrome_tails = [None] * size\n","    index = 0\n","\n","    current_node = self.head\n","    tail = self.head.prev\n","\n","    while current_node != tail:\n","      iterator_node = tail\n","\n","      while iterator_node != current_node:\n","        if current_node.data == iterator_node.data:\n","          palindrome_heads[index] = current_node\n","          palindrome_tails[index] = iterator_node\n","          index += 1\n","        \n","        iterator_node = iterator_node.prev\n","      \n","      current_node = current_node.next\n","\n","    for i in range(index):\n","      head = palindrome_heads[i]\n","      tail = palindrome_tails[i]\n","\n","      flag = True\n","      while True:\n","        if (head == tail) or (head.next == tail):\n","          break\n","        if head.data != tail.data:\n","          flag = False\n","          break\n","        else:\n","          head = head.next\n","          tail = tail.prev\n","      \n","      if flag == True:\n","        return palindrome_heads[i]\n","      else:\n","        tail = palindrome_heads[i]\n","        head = palindrome_tails[i]\n","\n","        flag = True\n","        while True:\n","          if (head == tail) or (tail.next == head):\n","            break\n","          if head.data != tail.data:\n","            flag = False\n","            break\n","          else:\n","            head = head.next\n","            tail = tail.prev\n","        \n","        if flag == True:\n","          return palindrome_heads[i]\n","    \n","    return False\n","\n","\n","\n","# driver code\n","a = [3,1,2,3,3]\n","list1 = LinkedList(a)\n","h = list1.palindromeSeparator()\n","list1.printList(h)\n"]}]}