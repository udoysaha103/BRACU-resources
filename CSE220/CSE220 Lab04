{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1pAXc6ztQKRazNfXkPC9bEi-UUvufhMeP","timestamp":1666605106576}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"9bqdhEPZxrtR","executionInfo":{"status":"ok","timestamp":1668194082616,"user_tz":-360,"elapsed":44,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}}},"outputs":[],"source":["class Node:\n","  def __init__(self, e, n, p):\n","    self.element = e\n","    self.next = n\n","    self.prev = p"]},{"cell_type":"code","source":["class DoublyList:\n","  # dummy headed\n","  def __init__(self, a):  # done\n","    self.head = Node(None, None, None)\n","\n","    # if 'a' is a python list, then the constructor will take each element of the array as a node\n","    if isinstance(a, list):\n","      current_node = self.head\n","\n","      for index in range(len(a)):\n","        new_node = Node(a[index], None, current_node)\n","\n","        current_node.next = new_node\n","        current_node = new_node\n","      \n","      self.head.prev = current_node\n","      current_node.next = self.head\n","    else:  # if 'a' is not a list, then assigning 'a' as head\n","      self.head.next = a\n","      a.prev = self.head\n","\n","      current_node = a\n","      while True:\n","        if current_node.next == None:\n","          break\n","        else:\n","          current_node = current_node.next\n","      \n","      self.head.prev = current_node\n","      current_node.next = self.head\n","  \n","\n","  # Counts the number of Nodes in the list\n","  def countNode(self):  # done\n","    count = 0\n","    current_node = self.head.next\n","\n","    while current_node != self.head:\n","      count += 1\n","      current_node = current_node.next\n","    \n","    return count\n","  \n","\n","  # prints the elements in the list\n","  def forwardprint(self):  # done\n","    if self.countNode() > 0:\n","      current_node = self.head.next\n","      print(current_node.element, end = \"\")  # printing the first element\n","\n","      current_node = current_node.next\n","\n","      while current_node != self.head:  # printing the rest of the elements in proper format\n","        print(f\", {current_node.element}\", end = \"\")\n","        current_node = current_node.next\n","    \n","    print()  # newline\n","\n","\n","  # prints the elements in the list backward\n","  def backwardprint(self):  # done\n","    size = self.countNode()\n","\n","    if size > 0:\n","      current_node = self.nodeAt(size-1)  # finds the tail node\n","      \n","      print(current_node.element, end = \"\")  # prints the tail element\n","      current_node = current_node.prev\n","\n","      while current_node != self.head:  # prints the rest of the elements backwardly in proper printing format\n","        print(f\", {current_node.element}\", end = \"\")\n","        current_node = current_node.prev\n","      \n","    print()  # newline\n","\n","\n","  # returns the reference of the at the given index. For invalid index return None.\n","  def nodeAt(self, idx):  # done\n","    size = self.countNode()\n","\n","    if (idx >= 0) and (idx < size):  # checks index validity\n","      current_node = self.head.next\n","      index = 0\n","\n","      while current_node != self.head:\n","        if index == idx:\n","          return current_node\n","        else:\n","          current_node = current_node.next\n","          index += 1\n","    else:\n","      return None\n","  \n","\n","  # returns the index of the containing the given element. if the element does not exist in the List, return -1.\n","  def indexOf(self, elem):  # done\n","    current_node = self.head.next\n","    index = 0\n","\n","    while current_node != self.head:\n","      if current_node.element == elem:\n","        return index  # if element found\n","      else:\n","        current_node = current_node.next\n","        index += 1\n","    \n","    return -1  # if not found\n","\n","\n","  # inserts containing the given element at the given index Check validity of index. \n","  def insert(self, elem, idx):  # done\n","    size = self.countNode()\n","\n","    if (idx >= 0) and (idx <= size):  # checking index validity\n","      if idx == 0:  # for the case of adding the node in head position\n","        new_node = Node(elem, self.head.next, self.head)\n","        self.head.next.prev = new_node\n","        self.head.next = new_node\n","\n","      elif idx == size:  # for the case of adding the node in tail position\n","        predecessor = self.nodeAt(size-1)\n","        new_node = Node(elem, self.head, predecessor)\n","\n","        predecessor.next = new_node\n","        self.head.prev = new_node\n","\n","      else:  # for the case of adding the node in any position between head and tail\n","        predecessor = self.nodeAt(idx-1)\n","        successor = predecessor.next\n","        new_node = Node(elem, successor, predecessor)\n","\n","        predecessor.next = new_node\n","        successor.prev = new_node\n","    else:\n","      print(\"Invalid index\")\n","    \n","  \n","  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.\n","  def remove(self, idx):  #done\n","    size = self.countNode()\n","\n","    if (idx >= 0) and (idx < size):  # checking index validity\n","      node_to_remove = None\n","      element_removed = None\n","\n","      if idx == 0:  # for the case of removing the node from head position\n","        node_to_remove = self.head.next\n","        element_removed = node_to_remove.element\n","\n","        # removing from list\n","        node_to_remove.next.prev = self.head\n","        self.head.next = node_to_remove.next\n","\n","      elif idx == size-1:  # for the case of removing the node from tail position\n","        predecessor = self.nodeAt(size-2)\n","        node_to_remove = predecessor.next\n","        element_removed = node_to_remove.element\n","\n","        # removing from list\n","        predecessor.next = self.head\n","        self.head.prev = predecessor\n","\n","      else:  # for the case of removing the node from any position between head and tail\n","        predecessor = self.nodeAt(idx-1)\n","        node_to_remove = predecessor.next\n","        successor = node_to_remove.next\n","        element_removed = node_to_remove.element\n","\n","        # removing from list\n","        predecessor.next = node_to_remove.next\n","        successor.prev = node_to_remove.prev\n","      \n","      #garbage collection\n","      node_to_remove.element = None\n","      node_to_remove.next = None\n","      node_to_remove.prev = None\n","      node_to_remove = None\n","\n","      return str(element_removed)\n","    else:\n","      return str(None)"],"metadata":{"id":"OvxiO4AIymgC","executionInfo":{"status":"ok","timestamp":1668196262837,"user_tz":-360,"elapsed":512,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["print(\"///  Test 01  ///\")\n","a1 = [10, 20, 30, 40]\n","h1 = DoublyList(a1) # Creates a linked list using the values from the array\n","\n","h1.forwardprint() # This should print: 10,20,30,40. \n","h1.backwardprint() # This should print: 40,30,20,10. \n","print(h1.countNode()) # This should print: 4\n","\n","print(\"///  Test 02  ///\")\n","# returns the reference of the at the given index. For invalid idx return None.\n","myNode = h1.nodeAt(2)\n","print(myNode.element) # This should print: 30. In case of invalid index This will print \"index error\"\n","\n","print(\"///  Test 03  ///\")\n","# returns the index of the containing the given element. if the element does not exist in the List, return -1.\n","index = h1.indexOf(40)\n","print(index) # This should print: 3. In case of element that \n","#doesn't exists in the list this will print -1.\n","\n","print(\"///  Test 04  ///\")\n","\n","a2 = [10, 20, 30, 40]\n","h2 = DoublyList(a2) # uses the  constructor\n","h2.forwardprint() # This should print: 10,20,30,40.  \n","\n","# inserts containing the given element at the given index. Check validity of index.\n","h2.insert(85,0)\n","h2.forwardprint() # This should print: 85,10,20,30,40. \n","h2.backwardprint() # This should print: 40,30,20,10,85.\n","\n","print()\n","h2.insert(95,3)\n","h2.forwardprint() # This should print: 85,10,20,95,30,40.  \n","h2.backwardprint() # This should print: 40,30,95,20,10,80.  \n","\n","print()\n","h2.insert(75,6)\n","h2.forwardprint() # This should print: 85,10,20,95,30,40,75. \n","h2.backwardprint() # This should print: 75,40,30,95,20,10,85. \n","\n","\n","print(\"///  Test 05  ///\")\n","a3 = [10, 20, 30, 40, 50, 60, 70]\n","h3 = DoublyList(a3) # uses the constructor\n","h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  \n","\n","# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.\n","print(\"Removed element: \"+ h3.remove(0)) # This should print: Removed element: 10\n","h3.forwardprint() # This should print: 20,30,40,50,60,70.  \n","h3.backwardprint() # This should print: 70,60,50,40,30,20.  \n","print(\"Removed element: \"+ h3.remove(3)) # This should print: Removed element: 50\n","h3.forwardprint() # This should print: 20,30,40,60,70.  \n","h3.backwardprint() # This should print: 70,60,40,30,20.  \n","print(\"Removed element: \"+ h3.remove(4)) # This should print: Removed element: 70\n","h3.forwardprint() # This should print: 20,30,40,60. \n","h3.backwardprint() # This should print: 60,40,30,20."],"metadata":{"id":"6X3SheP734rt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668196278065,"user_tz":-360,"elapsed":503,"user":{"displayName":"UDOY SAHA","userId":"17105537020042935758"}},"outputId":"e15e6645-fd9c-4516-d83e-a8d882da65dd"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["///  Test 01  ///\n","10, 20, 30, 40\n","40, 30, 20, 10\n","4\n","///  Test 02  ///\n","30\n","///  Test 03  ///\n","3\n","///  Test 04  ///\n","10, 20, 30, 40\n","85, 10, 20, 30, 40\n","40, 30, 20, 10, 85\n","\n","85, 10, 20, 95, 30, 40\n","40, 30, 95, 20, 10, 85\n","\n","85, 10, 20, 95, 30, 40, 75\n","75, 40, 30, 95, 20, 10, 85\n","///  Test 05  ///\n","10, 20, 30, 40, 50, 60, 70\n","Removed element: 10\n","20, 30, 40, 50, 60, 70\n","70, 60, 50, 40, 30, 20\n","Removed element: 50\n","20, 30, 40, 60, 70\n","70, 60, 40, 30, 20\n","Removed element: 70\n","20, 30, 40, 60\n","60, 40, 30, 20\n"]}]}]}